{"version":3,"file":"Collapsible.js","sources":["../../../../src/lib/components/common/CodeEditor.svelte","../../../../src/lib/components/icons/Clipboard.svelte","../../../../src/lib/components/icons/Reset.svelte","../../../../src/lib/components/common/SVGPanZoom.svelte","../../../../src/lib/components/icons/ChevronUpDown.svelte","../../../../src/lib/components/icons/CommandLine.svelte","../../../../src/lib/components/icons/Cube.svelte","../../../../src/lib/components/chat/Messages/CodeBlock.svelte","../../../../src/lib/components/chat/Messages/Markdown/KatexRenderer.svelte","../../../../src/lib/components/chat/Messages/Markdown/Source.svelte","../../../../src/lib/components/chat/Messages/Markdown/HTMLToken.svelte","../../../../src/lib/components/chat/Messages/Markdown/MarkdownInlineTokens.svelte","../../../../src/lib/components/icons/Star.svelte","../../../../src/lib/components/icons/LightBulb.svelte","../../../../src/lib/components/icons/Bolt.svelte","../../../../src/lib/components/chat/Messages/Markdown/AlertRenderer.svelte","../../../../src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte","../../../../src/lib/components/chat/Messages/Markdown.svelte","../../../../src/lib/components/common/Collapsible.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { basicSetup, EditorView } from 'codemirror';\n\timport { keymap, placeholder } from '@codemirror/view';\n\timport { Compartment, EditorState } from '@codemirror/state';\n\n\timport { acceptCompletion } from '@codemirror/autocomplete';\n\timport { indentWithTab } from '@codemirror/commands';\n\n\timport { indentUnit, LanguageDescription } from '@codemirror/language';\n\timport { languages } from '@codemirror/language-data';\n\n\timport { oneDark } from '@codemirror/theme-one-dark';\n\n\timport { onMount, createEventDispatcher, getContext, tick, onDestroy } from 'svelte';\n\n\timport PyodideWorker from '$lib/workers/pyodide.worker?worker';\n\n\timport { formatPythonCode } from '$lib/apis/utils';\n\timport { toast } from 'svelte-sonner';\n\timport { user } from '$lib/stores';\n\n\tconst dispatch = createEventDispatcher();\n\tconst i18n = getContext('i18n');\n\n\texport let boilerplate = '';\n\texport let value = '';\n\n\texport let onSave = () => {};\n\texport let onChange = () => {};\n\n\tlet _value = '';\n\n\t$: if (value) {\n\t\tupdateValue();\n\t}\n\n\tconst updateValue = () => {\n\t\tif (_value !== value) {\n\t\t\tconst changes = findChanges(_value, value);\n\t\t\t_value = value;\n\n\t\t\tif (codeEditor && changes.length > 0) {\n\t\t\t\tcodeEditor.dispatch({ changes });\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Finds multiple diffs in two strings and generates minimal change edits.\n\t */\n\tfunction findChanges(oldStr, newStr) {\n\t\tlet changes = [];\n\t\tlet oldIndex = 0,\n\t\t\tnewIndex = 0;\n\n\t\twhile (oldIndex < oldStr.length || newIndex < newStr.length) {\n\t\t\tif (oldStr[oldIndex] !== newStr[newIndex]) {\n\t\t\t\tlet start = oldIndex;\n\n\t\t\t\t// Identify the changed portion\n\t\t\t\twhile (oldIndex < oldStr.length && oldStr[oldIndex] !== newStr[newIndex]) {\n\t\t\t\t\toldIndex++;\n\t\t\t\t}\n\t\t\t\twhile (newIndex < newStr.length && newStr[newIndex] !== oldStr[start]) {\n\t\t\t\t\tnewIndex++;\n\t\t\t\t}\n\n\t\t\t\tchanges.push({\n\t\t\t\t\tfrom: start,\n\t\t\t\t\tto: oldIndex, // Replace the differing part\n\t\t\t\t\tinsert: newStr.substring(start, newIndex)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\toldIndex++;\n\t\t\t\tnewIndex++;\n\t\t\t}\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\texport let id = '';\n\texport let lang = '';\n\n\tlet codeEditor;\n\n\texport const focus = () => {\n\t\tcodeEditor.focus();\n\t};\n\n\tlet isDarkMode = false;\n\tlet editorTheme = new Compartment();\n\tlet editorLanguage = new Compartment();\n\n\tlanguages.push(\n\t\tLanguageDescription.of({\n\t\t\tname: 'HCL',\n\t\t\textensions: ['hcl', 'tf'],\n\t\t\tload() {\n\t\t\t\treturn import('codemirror-lang-hcl').then((m) => m.hcl());\n\t\t\t}\n\t\t})\n\t);\n\tlanguages.push(\n\t\tLanguageDescription.of({\n\t\t\tname: 'Elixir',\n\t\t\textensions: ['ex', 'exs'],\n\t\t\tload() {\n\t\t\t\treturn import('codemirror-lang-elixir').then((m) => m.elixir());\n\t\t\t}\n\t\t})\n\t);\n\n\tconst getLang = async () => {\n\t\tconst language = languages.find((l) => l.alias.includes(lang));\n\t\treturn await language?.load();\n\t};\n\n\tlet pyodideWorkerInstance = null;\n\n\tconst getPyodideWorker = () => {\n\t\tif (!pyodideWorkerInstance) {\n\t\t\tpyodideWorkerInstance = new PyodideWorker(); // Your worker constructor\n\t\t}\n\t\treturn pyodideWorkerInstance;\n\t};\n\n\t// Generate unique IDs for requests\n\tlet _formatReqId = 0;\n\n\tconst formatPythonCodePyodide = (code) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst id = `format-${++_formatReqId}`;\n\t\t\tlet timeout;\n\t\t\tconst worker = getPyodideWorker();\n\n\t\t\tconst script = `\nimport black\nprint(black.format_str(\"\"\"${code.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`').replace(/\"/g, '\\\\\"')}\"\"\", mode=black.Mode()))\n`;\n\n\t\t\tconst packages = ['black'];\n\n\t\t\tfunction handleMessage(event) {\n\t\t\t\tconst { id: eventId, stdout, stderr } = event.data;\n\t\t\t\tif (eventId !== id) return; // Only handle our message\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\tworker.removeEventListener('message', handleMessage);\n\t\t\t\tworker.removeEventListener('error', handleError);\n\n\t\t\t\tif (stderr) {\n\t\t\t\t\treject(stderr);\n\t\t\t\t} else {\n\t\t\t\t\tconst formatted = stdout && typeof stdout === 'string' ? stdout.trim() : '';\n\t\t\t\t\tresolve({ code: formatted });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction handleError(event) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\tworker.removeEventListener('message', handleMessage);\n\t\t\t\tworker.removeEventListener('error', handleError);\n\t\t\t\treject(event.message || 'Pyodide worker error');\n\t\t\t}\n\n\t\t\tworker.addEventListener('message', handleMessage);\n\t\t\tworker.addEventListener('error', handleError);\n\n\t\t\t// Send to worker\n\t\t\tworker.postMessage({ id, code: script, packages });\n\n\t\t\t// Timeout\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\tworker.removeEventListener('message', handleMessage);\n\t\t\t\tworker.removeEventListener('error', handleError);\n\t\t\t\ttry {\n\t\t\t\t\tworker.terminate();\n\t\t\t\t} catch {}\n\t\t\t\tpyodideWorkerInstance = null;\n\t\t\t\treject('Execution Time Limit Exceeded');\n\t\t\t}, 60000);\n\t\t});\n\t};\n\n\texport const formatPythonCodeHandler = async () => {\n\t\tif (codeEditor) {\n\t\t\tconst res = await (\n\t\t\t\t$user?.role === 'admin'\n\t\t\t\t\t? formatPythonCode(localStorage.token, _value)\n\t\t\t\t\t: formatPythonCodePyodide(_value)\n\t\t\t).catch((error) => {\n\t\t\t\ttoast.error(`${error}`);\n\t\t\t\treturn null;\n\t\t\t});\n\t\t\tif (res && res.code) {\n\t\t\t\tconst formattedCode = res.code;\n\t\t\t\tcodeEditor.dispatch({\n\t\t\t\t\tchanges: [{ from: 0, to: codeEditor.state.doc.length, insert: formattedCode }]\n\t\t\t\t});\n\n\t\t\t\t_value = formattedCode;\n\t\t\t\tonChange(_value);\n\t\t\t\tawait tick();\n\n\t\t\t\ttoast.success($i18n.t('Code formatted successfully'));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t};\n\n\tlet extensions = [\n\t\tbasicSetup,\n\t\tkeymap.of([{ key: 'Tab', run: acceptCompletion }, indentWithTab]),\n\t\tindentUnit.of('    '),\n\t\tplaceholder('Enter your code here...'),\n\t\tEditorView.updateListener.of((e) => {\n\t\t\tif (e.docChanged) {\n\t\t\t\t_value = e.state.doc.toString();\n\t\t\t\tonChange(_value);\n\t\t\t}\n\t\t}),\n\t\teditorTheme.of([]),\n\t\teditorLanguage.of([])\n\t];\n\n\t$: if (lang) {\n\t\tsetLanguage();\n\t}\n\n\tconst setLanguage = async () => {\n\t\tconst language = await getLang();\n\t\tif (language && codeEditor) {\n\t\t\tcodeEditor.dispatch({\n\t\t\t\teffects: editorLanguage.reconfigure(language)\n\t\t\t});\n\t\t}\n\t};\n\n\tonMount(() => {\n\t\tconsole.log(value);\n\t\tif (value === '') {\n\t\t\tvalue = boilerplate;\n\t\t}\n\n\t\t_value = value;\n\n\t\t// Check if html class has dark mode\n\t\tisDarkMode = document.documentElement.classList.contains('dark');\n\n\t\t// python code editor, highlight python code\n\t\tcodeEditor = new EditorView({\n\t\t\tstate: EditorState.create({\n\t\t\t\tdoc: _value,\n\t\t\t\textensions: extensions\n\t\t\t}),\n\t\t\tparent: document.getElementById(`code-textarea-${id}`)\n\t\t});\n\n\t\tif (isDarkMode) {\n\t\t\tcodeEditor.dispatch({\n\t\t\t\teffects: editorTheme.reconfigure(oneDark)\n\t\t\t});\n\t\t}\n\n\t\t// listen to html class changes this should fire only when dark mode is toggled\n\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\tmutations.forEach((mutation) => {\n\t\t\t\tif (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n\t\t\t\t\tconst _isDarkMode = document.documentElement.classList.contains('dark');\n\n\t\t\t\t\tif (_isDarkMode !== isDarkMode) {\n\t\t\t\t\t\tisDarkMode = _isDarkMode;\n\t\t\t\t\t\tif (_isDarkMode) {\n\t\t\t\t\t\t\tcodeEditor.dispatch({\n\t\t\t\t\t\t\t\teffects: editorTheme.reconfigure(oneDark)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcodeEditor.dispatch({\n\t\t\t\t\t\t\t\teffects: editorTheme.reconfigure()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tobserver.observe(document.documentElement, {\n\t\t\tattributes: true,\n\t\t\tattributeFilter: ['class']\n\t\t});\n\n\t\tconst keydownHandler = async (e) => {\n\t\t\tif ((e.ctrlKey || e.metaKey) && e.key === 's') {\n\t\t\t\te.preventDefault();\n\n\t\t\t\tonSave();\n\t\t\t}\n\n\t\t\t// Format code when Ctrl + Shift + F is pressed\n\t\t\tif ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'f') {\n\t\t\t\te.preventDefault();\n\t\t\t\tawait formatPythonCodeHandler();\n\t\t\t}\n\t\t};\n\n\t\tdocument.addEventListener('keydown', keydownHandler);\n\n\t\treturn () => {\n\t\t\tobserver.disconnect();\n\t\t\tdocument.removeEventListener('keydown', keydownHandler);\n\t\t};\n\t});\n\n\tonDestroy(() => {\n\t\tif (pyodideWorkerInstance) {\n\t\t\tpyodideWorkerInstance.terminate();\n\t\t}\n\t});\n</script>\n\n<div id=\"code-textarea-{id}\" class=\"h-full w-full text-sm\" />\n","<script lang=\"ts\">\n\texport let className = 'size-4';\n\texport let strokeWidth = '2';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"M15.666 3.888A2.25 2.25 0 0 0 13.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 0 1-.75.75H9a.75.75 0 0 1-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 0 1-2.25 2.25H6.75A2.25 2.25 0 0 1 4.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 0 1 1.927-.184\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\texport let className = 'size-4';\n\texport let strokeWidth = '2';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\timport fileSaver from 'file-saver';\n\tconst { saveAs } = fileSaver;\n\n\timport { toast } from 'svelte-sonner';\n\n\timport panzoom, { type PanZoom } from 'panzoom';\n\timport DOMPurify from 'dompurify';\n\n\timport { onMount, getContext } from 'svelte';\n\tconst i18n = getContext('i18n');\n\n\timport { copyToClipboard } from '$lib/utils';\n\n\timport DocumentDuplicate from '../icons/DocumentDuplicate.svelte';\n\timport Tooltip from './Tooltip.svelte';\n\timport Clipboard from '../icons/Clipboard.svelte';\n\timport Reset from '../icons/Reset.svelte';\n\timport ArrowDownTray from '../icons/ArrowDownTray.svelte';\n\n\texport let className = '';\n\texport let svg = '';\n\texport let content = '';\n\n\tlet instance: PanZoom;\n\n\tlet sceneParentElement: HTMLElement;\n\tlet sceneElement: HTMLElement;\n\n\t$: if (sceneElement) {\n\t\tinstance = panzoom(sceneElement, {\n\t\t\tbounds: true,\n\t\t\tboundsPadding: 0.1,\n\n\t\t\tzoomSpeed: 0.065\n\t\t});\n\t}\n\tconst resetPanZoomViewport = () => {\n\t\tinstance.moveTo(0, 0);\n\t\tinstance.zoomAbs(0, 0, 1);\n\t\tconsole.log(instance.getTransform());\n\t};\n\n\tconst downloadAsSVG = () => {\n\t\tconst svgBlob = new Blob([svg], { type: 'image/svg+xml' });\n\t\tsaveAs(svgBlob, `diagram.svg`);\n\t};\n</script>\n\n<div bind:this={sceneParentElement} class=\"relative {className}\">\n\t<div bind:this={sceneElement} class=\"flex h-full max-h-full justify-center items-center\">\n\t\t{@html svg}\n\t</div>\n\n\t{#if content}\n\t\t<div class=\" absolute top-1 right-1\">\n\t\t\t<div class=\"flex gap-1\">\n\t\t\t\t<Tooltip content={$i18n.t('Download as SVG')}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"p-1.5 rounded-lg border border-gray-100 dark:border-none dark:bg-gray-850 hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\tdownloadAsSVG();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ArrowDownTray className=\" size-4\" />\n\t\t\t\t\t</button>\n\t\t\t\t</Tooltip>\n\n\t\t\t\t<Tooltip content={$i18n.t('Reset view')}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"p-1.5 rounded-lg border border-gray-100 dark:border-none dark:bg-gray-850 hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\tresetPanZoomViewport();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Reset className=\" size-4\" />\n\t\t\t\t\t</button>\n\t\t\t\t</Tooltip>\n\n\t\t\t\t<Tooltip content={$i18n.t('Copy to clipboard')}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"p-1.5 rounded-lg border border-gray-100 dark:border-none dark:bg-gray-850 hover:bg-gray-50 dark:hover:bg-gray-800 transition\"\n\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\tcopyToClipboard(content);\n\t\t\t\t\t\t\ttoast.success($i18n.t('Copied to clipboard'));\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Clipboard className=\" size-4\" strokeWidth=\"1.5\" />\n\t\t\t\t\t</button>\n\t\t\t\t</Tooltip>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n</div>\n","<script lang=\"ts\">\n\texport let className = 'w-4 h-4';\n\texport let strokeWidth = '1.5';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"M8.25 15 12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\texport let className = 'w-4 h-4';\n\texport let strokeWidth = '1.5';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"m6.75 7.5 3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0 0 21 18V6a2.25 2.25 0 0 0-2.25-2.25H5.25A2.25 2.25 0 0 0 3 6v12a2.25 2.25 0 0 0 2.25 2.25Z\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\texport let className = 'size-4';\n\texport let strokeWidth = '2';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"m21 7.5-9-5.25L3 7.5m18 0-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\timport mermaid from 'mermaid';\n\n\timport { v4 as uuidv4 } from 'uuid';\n\n\timport { getContext, onMount, tick, onDestroy } from 'svelte';\n\timport { copyToClipboard } from '$lib/utils';\n\n\timport 'highlight.js/styles/github-dark.min.css';\n\n\timport PyodideWorker from '$lib/workers/pyodide.worker?worker';\n\timport CodeEditor from '$lib/components/common/CodeEditor.svelte';\n\timport SvgPanZoom from '$lib/components/common/SVGPanZoom.svelte';\n\timport { config } from '$lib/stores';\n\timport { executeCode } from '$lib/apis/utils';\n\timport { toast } from 'svelte-sonner';\n\timport ChevronUp from '$lib/components/icons/ChevronUp.svelte';\n\timport ChevronUpDown from '$lib/components/icons/ChevronUpDown.svelte';\n\timport CommandLine from '$lib/components/icons/CommandLine.svelte';\n\timport Cube from '$lib/components/icons/Cube.svelte';\n\n\tconst i18n = getContext('i18n');\n\n\texport let id = '';\n\n\texport let onSave = (e) => {};\n\texport let onUpdate = (e) => {};\n\texport let onPreview = (e) => {};\n\n\texport let save = false;\n\texport let run = true;\n\texport let preview = false;\n\texport let collapsed = false;\n\n\texport let token;\n\texport let lang = '';\n\texport let code = '';\n\texport let attributes = {};\n\n\texport let className = 'my-2';\n\texport let editorClassName = '';\n\texport let stickyButtonsClassName = 'top-8';\n\n\tlet pyodideWorker = null;\n\n\tlet _code = '';\n\t$: if (code) {\n\t\tupdateCode();\n\t}\n\n\tconst updateCode = () => {\n\t\t_code = code;\n\t};\n\n\tlet _token = null;\n\n\tlet mermaidHtml = null;\n\n\tlet highlightedCode = null;\n\tlet executing = false;\n\n\tlet stdout = null;\n\tlet stderr = null;\n\tlet result = null;\n\tlet files = null;\n\n\tlet copied = false;\n\tlet saved = false;\n\n\tconst collapseCodeBlock = () => {\n\t\tcollapsed = !collapsed;\n\t};\n\n\tconst saveCode = () => {\n\t\tsaved = true;\n\n\t\tcode = _code;\n\t\tonSave(code);\n\n\t\tsetTimeout(() => {\n\t\t\tsaved = false;\n\t\t}, 1000);\n\t};\n\n\tconst copyCode = async () => {\n\t\tcopied = true;\n\t\tawait copyToClipboard(code);\n\n\t\tsetTimeout(() => {\n\t\t\tcopied = false;\n\t\t}, 1000);\n\t};\n\n\tconst previewCode = () => {\n\t\tonPreview(code);\n\t};\n\n\tconst checkPythonCode = (str) => {\n\t\t// Check if the string contains typical Python syntax characters\n\t\tconst pythonSyntax = [\n\t\t\t'def ',\n\t\t\t'else:',\n\t\t\t'elif ',\n\t\t\t'try:',\n\t\t\t'except:',\n\t\t\t'finally:',\n\t\t\t'yield ',\n\t\t\t'lambda ',\n\t\t\t'assert ',\n\t\t\t'nonlocal ',\n\t\t\t'del ',\n\t\t\t'True',\n\t\t\t'False',\n\t\t\t'None',\n\t\t\t' and ',\n\t\t\t' or ',\n\t\t\t' not ',\n\t\t\t' in ',\n\t\t\t' is ',\n\t\t\t' with '\n\t\t];\n\n\t\tfor (let syntax of pythonSyntax) {\n\t\t\tif (str.includes(syntax)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// If none of the above conditions met, it's probably not Python code\n\t\treturn false;\n\t};\n\n\tconst executePython = async (code) => {\n\t\tresult = null;\n\t\tstdout = null;\n\t\tstderr = null;\n\n\t\texecuting = true;\n\n\t\tif ($config?.code?.engine === 'jupyter') {\n\t\t\tconst output = await executeCode(localStorage.token, code).catch((error) => {\n\t\t\t\ttoast.error(`${error}`);\n\t\t\t\treturn null;\n\t\t\t});\n\n\t\t\tif (output) {\n\t\t\t\tif (output['stdout']) {\n\t\t\t\t\tstdout = output['stdout'];\n\t\t\t\t\tconst stdoutLines = stdout.split('\\n');\n\n\t\t\t\t\tfor (const [idx, line] of stdoutLines.entries()) {\n\t\t\t\t\t\tif (line.startsWith('data:image/png;base64')) {\n\t\t\t\t\t\t\tif (files) {\n\t\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfiles = [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (stdout.startsWith(`${line}\\n`)) {\n\t\t\t\t\t\t\t\tstdout = stdout.replace(`${line}\\n`, ``);\n\t\t\t\t\t\t\t} else if (stdout.startsWith(`${line}`)) {\n\t\t\t\t\t\t\t\tstdout = stdout.replace(`${line}`, ``);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (output['result']) {\n\t\t\t\t\tresult = output['result'];\n\t\t\t\t\tconst resultLines = result.split('\\n');\n\n\t\t\t\t\tfor (const [idx, line] of resultLines.entries()) {\n\t\t\t\t\t\tif (line.startsWith('data:image/png;base64')) {\n\t\t\t\t\t\t\tif (files) {\n\t\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfiles = [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (result.startsWith(`${line}\\n`)) {\n\t\t\t\t\t\t\t\tresult = result.replace(`${line}\\n`, ``);\n\t\t\t\t\t\t\t} else if (result.startsWith(`${line}`)) {\n\t\t\t\t\t\t\t\tresult = result.replace(`${line}`, ``);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toutput['stderr'] && (stderr = output['stderr']);\n\t\t\t}\n\n\t\t\texecuting = false;\n\t\t} else {\n\t\t\texecutePythonAsWorker(code);\n\t\t}\n\t};\n\n\tconst executePythonAsWorker = async (code) => {\n\t\tlet packages = [\n\t\t\tcode.includes('requests') ? 'requests' : null,\n\t\t\tcode.includes('bs4') ? 'beautifulsoup4' : null,\n\t\t\tcode.includes('numpy') ? 'numpy' : null,\n\t\t\tcode.includes('pandas') ? 'pandas' : null,\n\t\t\tcode.includes('sklearn') ? 'scikit-learn' : null,\n\t\t\tcode.includes('scipy') ? 'scipy' : null,\n\t\t\tcode.includes('re') ? 'regex' : null,\n\t\t\tcode.includes('seaborn') ? 'seaborn' : null,\n\t\t\tcode.includes('sympy') ? 'sympy' : null,\n\t\t\tcode.includes('tiktoken') ? 'tiktoken' : null,\n\t\t\tcode.includes('matplotlib') ? 'matplotlib' : null,\n\t\t\tcode.includes('pytz') ? 'pytz' : null\n\t\t].filter(Boolean);\n\n\t\tconsole.log(packages);\n\n\t\tpyodideWorker = new PyodideWorker();\n\n\t\tpyodideWorker.postMessage({\n\t\t\tid: id,\n\t\t\tcode: code,\n\t\t\tpackages: packages\n\t\t});\n\n\t\tsetTimeout(() => {\n\t\t\tif (executing) {\n\t\t\t\texecuting = false;\n\t\t\t\tstderr = 'Execution Time Limit Exceeded';\n\t\t\t\tpyodideWorker.terminate();\n\t\t\t}\n\t\t}, 60000);\n\n\t\tpyodideWorker.onmessage = (event) => {\n\t\t\tconsole.log('pyodideWorker.onmessage', event);\n\t\t\tconst { id, ...data } = event.data;\n\n\t\t\tconsole.log(id, data);\n\n\t\t\tif (data['stdout']) {\n\t\t\t\tstdout = data['stdout'];\n\t\t\t\tconst stdoutLines = stdout.split('\\n');\n\n\t\t\t\tfor (const [idx, line] of stdoutLines.entries()) {\n\t\t\t\t\tif (line.startsWith('data:image/png;base64')) {\n\t\t\t\t\t\tif (files) {\n\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfiles = [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (stdout.startsWith(`${line}\\n`)) {\n\t\t\t\t\t\t\tstdout = stdout.replace(`${line}\\n`, ``);\n\t\t\t\t\t\t} else if (stdout.startsWith(`${line}`)) {\n\t\t\t\t\t\t\tstdout = stdout.replace(`${line}`, ``);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data['result']) {\n\t\t\t\tresult = data['result'];\n\t\t\t\tconst resultLines = result.split('\\n');\n\n\t\t\t\tfor (const [idx, line] of resultLines.entries()) {\n\t\t\t\t\tif (line.startsWith('data:image/png;base64')) {\n\t\t\t\t\t\tif (files) {\n\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfiles = [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'image/png',\n\t\t\t\t\t\t\t\t\tdata: line\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result.startsWith(`${line}\\n`)) {\n\t\t\t\t\t\t\tresult = result.replace(`${line}\\n`, ``);\n\t\t\t\t\t\t} else if (result.startsWith(`${line}`)) {\n\t\t\t\t\t\t\tresult = result.replace(`${line}`, ``);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdata['stderr'] && (stderr = data['stderr']);\n\t\t\tdata['result'] && (result = data['result']);\n\n\t\t\texecuting = false;\n\t\t};\n\n\t\tpyodideWorker.onerror = (event) => {\n\t\t\tconsole.log('pyodideWorker.onerror', event);\n\t\t\texecuting = false;\n\t\t};\n\t};\n\n\tlet debounceTimeout;\n\n\tconst drawMermaidDiagram = async () => {\n\t\ttry {\n\t\t\tif (await mermaid.parse(code)) {\n\t\t\t\tconst { svg } = await mermaid.render(`mermaid-${uuidv4()}`, code);\n\t\t\t\tmermaidHtml = svg;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log('Error:', error);\n\t\t}\n\t};\n\n\tconst render = async () => {\n\t\tif (lang === 'mermaid' && (token?.raw ?? '').slice(-4).includes('```')) {\n\t\t\t(async () => {\n\t\t\t\tawait drawMermaidDiagram();\n\t\t\t})();\n\t\t}\n\n\t\tonUpdate(token);\n\t};\n\n\t$: if (token) {\n\t\tif (JSON.stringify(token) !== JSON.stringify(_token)) {\n\t\t\t_token = token;\n\t\t}\n\t}\n\n\t$: if (_token) {\n\t\trender();\n\t}\n\n\t$: if (attributes) {\n\t\tonAttributesUpdate();\n\t}\n\n\tconst onAttributesUpdate = () => {\n\t\tif (attributes?.output) {\n\t\t\t// Create a helper function to unescape HTML entities\n\t\t\tconst unescapeHtml = (html) => {\n\t\t\t\tconst textArea = document.createElement('textarea');\n\t\t\t\ttextArea.innerHTML = html;\n\t\t\t\treturn textArea.value;\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\t// Unescape the HTML-encoded string\n\t\t\t\tconst unescapedOutput = unescapeHtml(attributes.output);\n\n\t\t\t\t// Parse the unescaped string into JSON\n\t\t\t\tconst output = JSON.parse(unescapedOutput);\n\n\t\t\t\t// Assign the parsed values to variables\n\t\t\t\tstdout = output.stdout;\n\t\t\t\tstderr = output.stderr;\n\t\t\t\tresult = output.result;\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error:', error);\n\t\t\t}\n\t\t}\n\t};\n\n\tonMount(async () => {\n\t\tconsole.log('codeblock', lang, code);\n\t\tif (token) {\n\t\t\tonUpdate(token);\n\t\t}\n\n\t\tif (document.documentElement.classList.contains('dark')) {\n\t\t\tmermaid.initialize({\n\t\t\t\tstartOnLoad: true,\n\t\t\t\ttheme: 'dark',\n\t\t\t\tsecurityLevel: 'loose'\n\t\t\t});\n\t\t} else {\n\t\t\tmermaid.initialize({\n\t\t\t\tstartOnLoad: true,\n\t\t\t\ttheme: 'default',\n\t\t\t\tsecurityLevel: 'loose'\n\t\t\t});\n\t\t}\n\t});\n\n\tonDestroy(() => {\n\t\tif (pyodideWorker) {\n\t\t\tpyodideWorker.terminate();\n\t\t}\n\t});\n</script>\n\n<div>\n\t<div class=\"relative {className} flex flex-col rounded-lg\" dir=\"ltr\">\n\t\t{#if lang === 'mermaid'}\n\t\t\t{#if mermaidHtml}\n\t\t\t\t<SvgPanZoom\n\t\t\t\t\tclassName=\" border border-gray-100 dark:border-gray-850 rounded-lg max-h-fit overflow-hidden\"\n\t\t\t\t\tsvg={mermaidHtml}\n\t\t\t\t\tcontent={_token.text}\n\t\t\t\t/>\n\t\t\t{:else}\n\t\t\t\t<pre class=\"mermaid\">{code}</pre>\n\t\t\t{/if}\n\t\t{:else}\n\t\t\t<div class=\"text-text-300 absolute pl-4 py-1.5 text-xs font-medium dark:text-white\">\n\t\t\t\t{lang}\n\t\t\t</div>\n\n\t\t\t<div\n\t\t\t\tclass=\"sticky {stickyButtonsClassName} mb-1 py-1 pr-2.5 flex items-center justify-end z-10 text-xs text-black dark:text-white\"\n\t\t\t>\n\t\t\t\t<div class=\"flex items-center gap-0.5 translate-y-[1px]\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"flex gap-1 items-center bg-none border-none bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-md px-1.5 py-0.5\"\n\t\t\t\t\t\ton:click={collapseCodeBlock}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div class=\" -translate-y-[0.5px]\">\n\t\t\t\t\t\t\t<ChevronUpDown className=\"size-3\" />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{collapsed ? $i18n.t('Expand') : $i18n.t('Collapse')}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</button>\n\n\t\t\t\t\t{#if preview && ['html', 'svg'].includes(lang)}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"flex gap-1 items-center run-code-button bg-none border-none bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-md px-1.5 py-0.5\"\n\t\t\t\t\t\t\ton:click={previewCode}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div class=\" -translate-y-[0.5px]\">\n\t\t\t\t\t\t\t\t<Cube className=\"size-3\" />\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{$i18n.t('Preview')}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t{#if ($config?.features?.enable_code_execution ?? true) && (lang.toLowerCase() === 'python' || lang.toLowerCase() === 'py' || (lang === '' && checkPythonCode(code)))}\n\t\t\t\t\t\t{#if executing}\n\t\t\t\t\t\t\t<div class=\"run-code-button bg-none border-none p-1 cursor-not-allowed\">\n\t\t\t\t\t\t\t\t{$i18n.t('Running')}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{:else if run}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclass=\"flex gap-1 items-center run-code-button bg-none border-none bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-md px-1.5 py-0.5\"\n\t\t\t\t\t\t\t\ton:click={async () => {\n\t\t\t\t\t\t\t\t\tcode = _code;\n\t\t\t\t\t\t\t\t\tawait tick();\n\t\t\t\t\t\t\t\t\texecutePython(code);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div class=\" -translate-y-[0.5px]\">\n\t\t\t\t\t\t\t\t\t<CommandLine className=\"size-3\" />\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t{$i18n.t('Run')}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t{#if save}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclass=\"save-code-button bg-none border-none bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-md px-1.5 py-0.5\"\n\t\t\t\t\t\t\ton:click={saveCode}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{saved ? $i18n.t('Saved') : $i18n.t('Save')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"copy-code-button bg-none border-none bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-md px-1.5 py-0.5\"\n\t\t\t\t\t\ton:click={copyCode}>{copied ? $i18n.t('Copied') : $i18n.t('Copy')}</button\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div\n\t\t\t\tclass=\"language-{lang} rounded-t-lg -mt-8 {editorClassName\n\t\t\t\t\t? editorClassName\n\t\t\t\t\t: executing || stdout || stderr || result\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: 'rounded-b-lg'} overflow-hidden\"\n\t\t\t>\n\t\t\t\t<div class=\" pt-7 bg-gray-50 dark:bg-gray-850\"></div>\n\n\t\t\t\t{#if !collapsed}\n\t\t\t\t\t<CodeEditor\n\t\t\t\t\t\tvalue={code}\n\t\t\t\t\t\t{id}\n\t\t\t\t\t\t{lang}\n\t\t\t\t\t\tonSave={() => {\n\t\t\t\t\t\t\tsaveCode();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t_code = value;\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t{:else}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"bg-gray-50 dark:bg-black dark:text-white rounded-b-lg! pt-2 pb-2 px-4 flex flex-col gap-2 text-xs\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<span class=\"text-gray-500 italic\">\n\t\t\t\t\t\t\t{$i18n.t('{{COUNT}} hidden lines', {\n\t\t\t\t\t\t\t\tCOUNT: code.split('\\n').length\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t{#if !collapsed}\n\t\t\t\t<div\n\t\t\t\t\tid=\"plt-canvas-{id}\"\n\t\t\t\t\tclass=\"bg-gray-50 dark:bg-[#202123] dark:text-white max-w-full overflow-x-auto scrollbar-hidden\"\n\t\t\t\t/>\n\n\t\t\t\t{#if executing || stdout || stderr || result || files}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"bg-gray-50 dark:bg-[#202123] dark:text-white rounded-b-lg! py-4 px-4 flex flex-col gap-2\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{#if executing}\n\t\t\t\t\t\t\t<div class=\" \">\n\t\t\t\t\t\t\t\t<div class=\" text-gray-500 text-xs mb-1\">STDOUT/STDERR</div>\n\t\t\t\t\t\t\t\t<div class=\"text-sm\">Running...</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t{#if stdout || stderr}\n\t\t\t\t\t\t\t\t<div class=\" \">\n\t\t\t\t\t\t\t\t\t<div class=\" text-gray-500 text-xs mb-1\">STDOUT/STDERR</div>\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclass=\"text-sm {stdout?.split('\\n')?.length > 100\n\t\t\t\t\t\t\t\t\t\t\t? `max-h-96`\n\t\t\t\t\t\t\t\t\t\t\t: ''}  overflow-y-auto\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{stdout || stderr}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t{#if result || files}\n\t\t\t\t\t\t\t\t<div class=\" \">\n\t\t\t\t\t\t\t\t\t<div class=\" text-gray-500 text-xs mb-1\">RESULT</div>\n\t\t\t\t\t\t\t\t\t{#if result}\n\t\t\t\t\t\t\t\t\t\t<div class=\"text-sm\">{`${JSON.stringify(result)}`}</div>\n\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t\t{#if files}\n\t\t\t\t\t\t\t\t\t\t<div class=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{#each files as file}\n\t\t\t\t\t\t\t\t\t\t\t\t{#if file.type.startsWith('image')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img src={file.data} alt=\"Output\" class=\" w-full max-w-[36rem]\" />\n\t\t\t\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t{/if}\n\t\t{/if}\n\t</div>\n</div>\n","<script lang=\"ts\">\n\timport katex from 'katex';\n\timport 'katex/contrib/mhchem';\n\timport 'katex/dist/katex.min.css';\n\n\texport let content: string;\n\texport let displayMode: boolean = false;\n</script>\n\n{@html katex.renderToString(content, { displayMode, throwOnError: false })}\n","<script lang=\"ts\">\n\texport let id;\n\texport let token;\n\texport let onClick: Function = () => {};\n\n\tlet attributes: Record<string, string | undefined> = {};\n\n\tfunction extractAttributes(input: string): Record<string, string> {\n\t\tconst regex = /(\\w+)=\"([^\"]*)\"/g;\n\t\tlet match;\n\t\tlet attrs: Record<string, string> = {};\n\n\t\t// Loop through all matches and populate the attributes object\n\t\twhile ((match = regex.exec(input)) !== null) {\n\t\t\tattrs[match[1]] = match[2];\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Helper function to return only the domain from a URL\n\tfunction getDomain(url: string): string {\n\t\tconst domain = url.replace('http://', '').replace('https://', '').split(/[/?#]/)[0];\n\t\treturn domain;\n\t}\n\n\t// Helper function to check if text is a URL and return the domain\n\tfunction formattedTitle(title: string): string {\n\t\tif (title.startsWith('http')) {\n\t\t\treturn getDomain(title);\n\t\t}\n\n\t\treturn title;\n\t}\n\n\t$: attributes = extractAttributes(token.text);\n</script>\n\n{#if attributes.title !== 'N/A'}\n\t<button\n\t\tclass=\"text-xs font-medium w-fit translate-y-[2px] px-2 py-0.5 dark:bg-white/5 dark:text-white/60 dark:hover:text-white bg-gray-50 text-black/60 hover:text-black transition rounded-lg\"\n\t\ton:click={() => {\n\t\t\tonClick(id, attributes.data);\n\t\t}}\n\t>\n\t\t<span class=\"line-clamp-1\">\n\t\t\t{attributes.title ? formattedTitle(attributes.title) : ''}\n\t\t</span>\n\t</button>\n{/if}\n","<script lang=\"ts\">\n\timport DOMPurify from 'dompurify';\n\timport type { Token } from 'marked';\n\n\timport { WEBUI_BASE_URL } from '$lib/constants';\n\timport Source from './Source.svelte';\n\timport { settings } from '$lib/stores';\n\n\texport let id: string;\n\texport let token: Token;\n\n\texport let onSourceClick: Function = () => {};\n\n\tlet html: string | null = null;\n\n\t$: if (token.type === 'html' && token?.text) {\n\t\thtml = DOMPurify.sanitize(token.text);\n\t} else {\n\t\thtml = null;\n\t}\n</script>\n\n{#if token.type === 'html'}\n\t{#if html && html.includes('<video')}\n\t\t{@const video = html.match(/<video[^>]*>([\\s\\S]*?)<\\/video>/)}\n\t\t{@const videoSrc = video && video[1]}\n\t\t{#if videoSrc}\n\t\t\t<!-- svelte-ignore a11y-media-has-caption -->\n\t\t\t<video\n\t\t\t\tclass=\"w-full my-2\"\n\t\t\t\tsrc={videoSrc.replaceAll('&amp;', '&')}\n\t\t\t\ttitle=\"Video player\"\n\t\t\t\tframeborder=\"0\"\n\t\t\t\treferrerpolicy=\"strict-origin-when-cross-origin\"\n\t\t\t\tcontrols\n\t\t\t\tallowfullscreen\n\t\t\t></video>\n\t\t{:else}\n\t\t\t{token.text}\n\t\t{/if}\n\t{:else if html && html.includes('<audio')}\n\t\t{@const audio = html.match(/<audio[^>]*>([\\s\\S]*?)<\\/audio>/)}\n\t\t{@const audioSrc = audio && audio[1]}\n\t\t{#if audioSrc}\n\t\t\t<!-- svelte-ignore a11y-media-has-caption -->\n\t\t\t<audio\n\t\t\t\tclass=\"w-full my-2\"\n\t\t\t\tsrc={audioSrc.replaceAll('&amp;', '&')}\n\t\t\t\ttitle=\"Audio player\"\n\t\t\t\tcontrols\n\t\t\t></audio>\n\t\t{:else}\n\t\t\t{token.text}\n\t\t{/if}\n\t{:else if token.text && token.text.match(/<iframe\\s+[^>]*src=\"https:\\/\\/www\\.youtube\\.com\\/embed\\/([a-zA-Z0-9_-]{11})(?:\\?[^\"]*)?\"[^>]*><\\/iframe>/)}\n\t\t{@const match = token.text.match(\n\t\t\t/<iframe\\s+[^>]*src=\"https:\\/\\/www\\.youtube\\.com\\/embed\\/([a-zA-Z0-9_-]{11})(?:\\?[^\"]*)?\"[^>]*><\\/iframe>/\n\t\t)}\n\t\t{@const ytId = match && match[1]}\n\t\t{#if ytId}\n\t\t\t<iframe\n\t\t\t\tclass=\"w-full aspect-video my-2\"\n\t\t\t\tsrc={`https://www.youtube.com/embed/${ytId}`}\n\t\t\t\ttitle=\"YouTube video player\"\n\t\t\t\tframeborder=\"0\"\n\t\t\t\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\t\t\t\treferrerpolicy=\"strict-origin-when-cross-origin\"\n\t\t\t\tallowfullscreen\n\t\t\t>\n\t\t\t</iframe>\n\t\t{/if}\n\t{:else if token.text.includes(`<file type=\"html\"`)}\n\t\t{@const match = token.text.match(/<file type=\"html\" id=\"([^\"]+)\"/)}\n\t\t{@const fileId = match && match[1]}\n\t\t{#if fileId}\n\t\t\t<iframe\n\t\t\t\tclass=\"w-full my-2\"\n\t\t\t\tsrc={`${WEBUI_BASE_URL}/api/v1/files/${fileId}/content/html`}\n\t\t\t\ttitle=\"Content\"\n\t\t\t\tframeborder=\"0\"\n\t\t\t\tsandbox=\"allow-scripts{($settings?.iframeSandboxAllowForms ?? false)\n\t\t\t\t\t? ' allow-forms'\n\t\t\t\t\t: ''}{($settings?.iframeSandboxAllowSameOrigin ?? false) ? ' allow-same-origin' : ''}\"\n\t\t\t\treferrerpolicy=\"strict-origin-when-cross-origin\"\n\t\t\t\tallowfullscreen\n\t\t\t\twidth=\"100%\"\n\t\t\t\tonload=\"this.style.height=(this.contentWindow.document.body.scrollHeight+20)+'px';\"\n\t\t\t></iframe>\n\t\t{/if}\n\t{:else if token.text.includes(`<source_id`)}\n\t\t<Source {id} {token} onClick={onSourceClick} />\n\t{:else}\n\t\t{token.text}\n\t{/if}\n{/if}\n","<script lang=\"ts\">\n\timport DOMPurify from 'dompurify';\n\timport { toast } from 'svelte-sonner';\n\n\timport type { Token } from 'marked';\n\timport { getContext } from 'svelte';\n\n\tconst i18n = getContext('i18n');\n\n\timport { WEBUI_BASE_URL } from '$lib/constants';\n\timport { copyToClipboard, unescapeHtml } from '$lib/utils';\n\n\timport Image from '$lib/components/common/Image.svelte';\n\timport KatexRenderer from './KatexRenderer.svelte';\n\timport Source from './Source.svelte';\n\timport HtmlToken from './HTMLToken.svelte';\n\n\texport let id: string;\n\texport let tokens: Token[];\n\texport let onSourceClick: Function = () => {};\n</script>\n\n{#each tokens as token}\n\t{#if token.type === 'escape'}\n\t\t{unescapeHtml(token.text)}\n\t{:else if token.type === 'html'}\n\t\t<HtmlToken {id} {token} {onSourceClick} />\n\t{:else if token.type === 'link'}\n\t\t{#if token.tokens}\n\t\t\t<a href={token.href} target=\"_blank\" rel=\"nofollow\" title={token.title}>\n\t\t\t\t<svelte:self id={`${id}-a`} tokens={token.tokens} {onSourceClick} />\n\t\t\t</a>\n\t\t{:else}\n\t\t\t<a href={token.href} target=\"_blank\" rel=\"nofollow\" title={token.title}>{token.text}</a>\n\t\t{/if}\n\t{:else if token.type === 'image'}\n\t\t<Image src={token.href} alt={token.text} />\n\t{:else if token.type === 'strong'}\n\t\t<strong><svelte:self id={`${id}-strong`} tokens={token.tokens} {onSourceClick} /></strong>\n\t{:else if token.type === 'em'}\n\t\t<em><svelte:self id={`${id}-em`} tokens={token.tokens} {onSourceClick} /></em>\n\t{:else if token.type === 'codespan'}\n\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t<!-- svelte-ignore a11y-no-noninteractive-element-interactions -->\n\t\t<code\n\t\t\tclass=\"codespan cursor-pointer\"\n\t\t\ton:click={() => {\n\t\t\t\tcopyToClipboard(unescapeHtml(token.text));\n\t\t\t\ttoast.success($i18n.t('Copied to clipboard'));\n\t\t\t}}>{unescapeHtml(token.text)}</code\n\t\t>\n\t{:else if token.type === 'br'}\n\t\t<br />\n\t{:else if token.type === 'del'}\n\t\t<del><svelte:self id={`${id}-del`} tokens={token.tokens} {onSourceClick} /></del>\n\t{:else if token.type === 'inlineKatex'}\n\t\t{#if token.text}\n\t\t\t<KatexRenderer content={token.text} displayMode={false} />\n\t\t{/if}\n\t{:else if token.type === 'iframe'}\n\t\t<iframe\n\t\t\tsrc=\"{WEBUI_BASE_URL}/api/v1/files/{token.fileId}/content\"\n\t\t\ttitle={token.fileId}\n\t\t\twidth=\"100%\"\n\t\t\tframeborder=\"0\"\n\t\t\tonload=\"this.style.height=(this.contentWindow.document.body.scrollHeight+20)+'px';\"\n\t\t></iframe>\n\t{:else if token.type === 'text'}\n\t\t{token.raw}\n\t{/if}\n{/each}\n","<script lang=\"ts\">\n\texport let className = 'w-4 h-4';\n\texport let strokeWidth = '1.5';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\texport let className = 'w-4 h-4';\n\texport let strokeWidth = '1.5';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"M12 18v-5.25m0 0a6.01 6.01 0 0 0 1.5-.189m-1.5.189a6.01 6.01 0 0 1-1.5-.189m3.75 7.478a12.06 12.06 0 0 1-4.5 0m3.75 2.383a14.406 14.406 0 0 1-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 1 0-7.517 0c.85.493 1.509 1.333 1.509 2.316V18\"\n\t/>\n</svg>\n","<script lang=\"ts\">\n\texport let className = 'size-3';\n\texport let strokeWidth = '1.5';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z\"\n\t/>\n</svg>\n","<script lang=\"ts\" context=\"module\">\n\timport { marked, type Token } from 'marked';\n\n\ttype AlertType = 'NOTE' | 'TIP' | 'IMPORTANT' | 'WARNING' | 'CAUTION';\n\n\tinterface AlertTheme {\n\t\tborder: string;\n\t\ttext: string;\n\t\ticon: ComponentType;\n\t}\n\n\texport interface AlertData {\n\t\ttype: AlertType;\n\t\ttext: string;\n\t\ttokens: Token[];\n\t}\n\n\tconst alertStyles: Record<AlertType, AlertTheme> = {\n\t\tNOTE: {\n\t\t\tborder: 'border-sky-500',\n\t\t\ttext: 'text-sky-500',\n\t\t\ticon: Info\n\t\t},\n\t\tTIP: {\n\t\t\tborder: 'border-emerald-500',\n\t\t\ttext: 'text-emerald-500',\n\t\t\ticon: LightBulb\n\t\t},\n\t\tIMPORTANT: {\n\t\t\tborder: 'border-purple-500',\n\t\t\ttext: 'text-purple-500',\n\t\t\ticon: Star\n\t\t},\n\t\tWARNING: {\n\t\t\tborder: 'border-yellow-500',\n\t\t\ttext: 'text-yellow-500',\n\t\t\ticon: ArrowRightCircle\n\t\t},\n\t\tCAUTION: {\n\t\t\tborder: 'border-rose-500',\n\t\t\ttext: 'text-rose-500',\n\t\t\ticon: Bolt\n\t\t}\n\t};\n\n\texport function alertComponent(token: Token): AlertData | false {\n\t\tconst regExpStr = `^(?:\\\\[!(NOTE|TIP|IMPORTANT|WARNING|CAUTION)\\\\])\\\\s*?\\n*`;\n\t\tconst regExp = new RegExp(regExpStr);\n\t\tconst matches = token.text?.match(regExp);\n\n\t\tif (matches && matches.length) {\n\t\t\tconst alertType = matches[1] as AlertType;\n\t\t\tconst newText = token.text.replace(regExp, '');\n\t\t\tconst newTokens = marked.lexer(newText);\n\t\t\treturn {\n\t\t\t\ttype: alertType,\n\t\t\t\ttext: newText,\n\t\t\t\ttokens: newTokens\n\t\t\t};\n\t\t}\n\t\treturn false;\n\t}\n</script>\n\n<script lang=\"ts\">\n\timport Info from '$lib/components/icons/Info.svelte';\n\timport Star from '$lib/components/icons/Star.svelte';\n\timport LightBulb from '$lib/components/icons/LightBulb.svelte';\n\timport Bolt from '$lib/components/icons/Bolt.svelte';\n\timport ArrowRightCircle from '$lib/components/icons/ArrowRightCircle.svelte';\n\timport MarkdownTokens from './MarkdownTokens.svelte';\n\timport type { ComponentType } from 'svelte';\n\n\texport let token: Token;\n\texport let alert: AlertData;\n\texport let id = '';\n\texport let tokenIdx = 0;\n\texport let onTaskClick: ((event: MouseEvent) => void) | undefined = undefined;\n\texport let onSourceClick: ((event: MouseEvent) => void) | undefined = undefined;\n</script>\n\n<!--\n\nRenders the following Markdown as alerts:\n\n> [!NOTE]\n> Example note\n\n> [!TIP]\n> Example tip\n\n> [!IMPORTANT]\n> Example important\n\n> [!CAUTION]\n> Example caution\n\n> [!WARNING]\n> Example warning\n\n-->\n<div class={`border-l-4 pl-2.5 ${alertStyles[alert.type].border} my-0.5`}>\n\t<div class=\"{alertStyles[alert.type].text} items-center flex gap-1 py-1.5\">\n\t\t<svelte:component this={alertStyles[alert.type].icon} className=\"inline-block size-4\" />\n\t\t<span class=\" font-medium\">{alert.type}</span>\n\t</div>\n\t<div class=\"pb-2\">\n\t\t<MarkdownTokens id={`${id}-${tokenIdx}`} tokens={alert.tokens} {onTaskClick} {onSourceClick} />\n\t</div>\n</div>\n","<script lang=\"ts\">\n\timport DOMPurify from 'dompurify';\n\timport { onMount, getContext } from 'svelte';\n\tconst i18n = getContext('i18n');\n\n\timport fileSaver from 'file-saver';\n\tconst { saveAs } = fileSaver;\n\n\timport { marked, type Token } from 'marked';\n\timport { unescapeHtml } from '$lib/utils';\n\n\timport { WEBUI_BASE_URL } from '$lib/constants';\n\n\timport CodeBlock from '$lib/components/chat/Messages/CodeBlock.svelte';\n\timport MarkdownInlineTokens from '$lib/components/chat/Messages/Markdown/MarkdownInlineTokens.svelte';\n\timport KatexRenderer from './KatexRenderer.svelte';\n\timport AlertRenderer, { alertComponent } from './AlertRenderer.svelte';\n\timport Collapsible from '$lib/components/common/Collapsible.svelte';\n\timport Tooltip from '$lib/components/common/Tooltip.svelte';\n\timport ArrowDownTray from '$lib/components/icons/ArrowDownTray.svelte';\n\n\timport Source from './Source.svelte';\n\timport { settings } from '$lib/stores';\n\timport HtmlToken from './HTMLToken.svelte';\n\n\texport let id: string;\n\texport let tokens: Token[];\n\texport let top = true;\n\texport let attributes = {};\n\n\texport let save = false;\n\texport let preview = false;\n\n\texport let onSave: Function = () => {};\n\texport let onUpdate: Function = () => {};\n\texport let onPreview: Function = () => {};\n\n\texport let onTaskClick: Function = () => {};\n\texport let onSourceClick: Function = () => {};\n\n\tconst headerComponent = (depth: number) => {\n\t\treturn 'h' + depth;\n\t};\n\n\tconst exportTableToCSVHandler = (token, tokenIdx = 0) => {\n\t\tconsole.log('Exporting table to CSV');\n\n\t\t// Extract header row text and escape for CSV.\n\t\tconst header = token.header.map((headerCell) => `\"${headerCell.text.replace(/\"/g, '\"\"')}\"`);\n\n\t\t// Create an array for rows that will hold the mapped cell text.\n\t\tconst rows = token.rows.map((row) =>\n\t\t\trow.map((cell) => {\n\t\t\t\t// Map tokens into a single text\n\t\t\t\tconst cellContent = cell.tokens.map((token) => token.text).join('');\n\t\t\t\t// Escape double quotes and wrap the content in double quotes\n\t\t\t\treturn `\"${cellContent.replace(/\"/g, '\"\"')}\"`;\n\t\t\t})\n\t\t);\n\n\t\t// Combine header and rows\n\t\tconst csvData = [header, ...rows];\n\n\t\t// Join the rows using commas (,) as the separator and rows using newline (\\n).\n\t\tconst csvContent = csvData.map((row) => row.join(',')).join('\\n');\n\n\t\t// Log rows and CSV content to ensure everything is correct.\n\t\tconsole.log(csvData);\n\t\tconsole.log(csvContent);\n\n\t\t// To handle Unicode characters, you need to prefix the data with a BOM:\n\t\tconst bom = '\\uFEFF'; // BOM for UTF-8\n\n\t\t// Create a new Blob prefixed with the BOM to ensure proper Unicode encoding.\n\t\tconst blob = new Blob([bom + csvContent], { type: 'text/csv;charset=UTF-8' });\n\n\t\t// Use FileSaver.js's saveAs function to save the generated CSV file.\n\t\tsaveAs(blob, `table-${id}-${tokenIdx}.csv`);\n\t};\n</script>\n\n<!-- {JSON.stringify(tokens)} -->\n{#each tokens as token, tokenIdx (tokenIdx)}\n\t{#if token.type === 'hr'}\n\t\t<hr class=\" border-gray-100 dark:border-gray-850\" />\n\t{:else if token.type === 'heading'}\n\t\t<svelte:element this={headerComponent(token.depth)} dir=\"auto\">\n\t\t\t<MarkdownInlineTokens id={`${id}-${tokenIdx}-h`} tokens={token.tokens} {onSourceClick} />\n\t\t</svelte:element>\n\t{:else if token.type === 'code'}\n\t\t{#if token.raw.includes('```')}\n\t\t\t<CodeBlock\n\t\t\t\tid={`${id}-${tokenIdx}`}\n\t\t\t\tcollapsed={$settings?.collapseCodeBlocks ?? false}\n\t\t\t\t{token}\n\t\t\t\tlang={token?.lang ?? ''}\n\t\t\t\tcode={token?.text ?? ''}\n\t\t\t\t{attributes}\n\t\t\t\t{save}\n\t\t\t\t{preview}\n\t\t\t\tonSave={(value) => {\n\t\t\t\t\tonSave({\n\t\t\t\t\t\traw: token.raw,\n\t\t\t\t\t\toldContent: token.text,\n\t\t\t\t\t\tnewContent: value\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t\t{onUpdate}\n\t\t\t\t{onPreview}\n\t\t\t/>\n\t\t{:else}\n\t\t\t{token.text}\n\t\t{/if}\n\t{:else if token.type === 'table'}\n\t\t<div class=\"relative w-full group\">\n\t\t\t<div class=\"scrollbar-hidden relative overflow-x-auto max-w-full rounded-lg\">\n\t\t\t\t<table\n\t\t\t\t\tclass=\" w-full text-sm text-left text-gray-500 dark:text-gray-400 max-w-full rounded-xl\"\n\t\t\t\t>\n\t\t\t\t\t<thead\n\t\t\t\t\t\tclass=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-850 dark:text-gray-400 border-none\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<tr class=\"\">\n\t\t\t\t\t\t\t{#each token.header as header, headerIdx}\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tscope=\"col\"\n\t\t\t\t\t\t\t\t\tclass=\"px-3! py-1.5! cursor-pointer border border-gray-100 dark:border-gray-850\"\n\t\t\t\t\t\t\t\t\tstyle={token.align[headerIdx] ? '' : `text-align: ${token.align[headerIdx]}`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div class=\"gap-1.5 text-left\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"shrink-0 break-normal\">\n\t\t\t\t\t\t\t\t\t\t\t<MarkdownInlineTokens\n\t\t\t\t\t\t\t\t\t\t\t\tid={`${id}-${tokenIdx}-header-${headerIdx}`}\n\t\t\t\t\t\t\t\t\t\t\t\ttokens={header.tokens}\n\t\t\t\t\t\t\t\t\t\t\t\t{onSourceClick}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{#each token.rows as row, rowIdx}\n\t\t\t\t\t\t\t<tr class=\"bg-white dark:bg-gray-900 dark:border-gray-850 text-xs\">\n\t\t\t\t\t\t\t\t{#each row ?? [] as cell, cellIdx}\n\t\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\t\tclass=\"px-3! py-1.5! text-gray-900 dark:text-white w-max border border-gray-100 dark:border-gray-850\"\n\t\t\t\t\t\t\t\t\t\tstyle={token.align[cellIdx] ? '' : `text-align: ${token.align[cellIdx]}`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div class=\"break-normal\">\n\t\t\t\t\t\t\t\t\t\t\t<MarkdownInlineTokens\n\t\t\t\t\t\t\t\t\t\t\t\tid={`${id}-${tokenIdx}-row-${rowIdx}-${cellIdx}`}\n\t\t\t\t\t\t\t\t\t\t\t\ttokens={cell.tokens}\n\t\t\t\t\t\t\t\t\t\t\t\t{onSourceClick}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\n\t\t\t<div class=\" absolute top-1 right-1.5 z-20 invisible group-hover:visible\">\n\t\t\t\t<Tooltip content={$i18n.t('Export to CSV')}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"p-1 rounded-lg bg-transparent transition\"\n\t\t\t\t\t\ton:click={(e) => {\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\texportTableToCSVHandler(token, tokenIdx);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ArrowDownTray className=\" size-3.5\" strokeWidth=\"1.5\" />\n\t\t\t\t\t</button>\n\t\t\t\t</Tooltip>\n\t\t\t</div>\n\t\t</div>\n\t{:else if token.type === 'blockquote'}\n\t\t{@const alert = alertComponent(token)}\n\t\t{#if alert}\n\t\t\t<AlertRenderer {token} {alert} />\n\t\t{:else}\n\t\t\t<blockquote dir=\"auto\">\n\t\t\t\t<svelte:self id={`${id}-${tokenIdx}`} tokens={token.tokens} {onTaskClick} {onSourceClick} />\n\t\t\t</blockquote>\n\t\t{/if}\n\t{:else if token.type === 'list'}\n\t\t{#if token.ordered}\n\t\t\t<ol start={token.start || 1} dir=\"auto\">\n\t\t\t\t{#each token.items as item, itemIdx}\n\t\t\t\t\t<li class=\"text-start\">\n\t\t\t\t\t\t{#if item?.task}\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclass=\" translate-y-[1px] -translate-x-1\"\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={item.checked}\n\t\t\t\t\t\t\t\ton:change={(e) => {\n\t\t\t\t\t\t\t\t\tonTaskClick({\n\t\t\t\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t\t\t\t\ttoken: token,\n\t\t\t\t\t\t\t\t\t\ttokenIdx: tokenIdx,\n\t\t\t\t\t\t\t\t\t\titem: item,\n\t\t\t\t\t\t\t\t\t\titemIdx: itemIdx,\n\t\t\t\t\t\t\t\t\t\tchecked: e.target.checked\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t<svelte:self\n\t\t\t\t\t\t\tid={`${id}-${tokenIdx}-${itemIdx}`}\n\t\t\t\t\t\t\ttokens={item.tokens}\n\t\t\t\t\t\t\ttop={token.loose}\n\t\t\t\t\t\t\t{onTaskClick}\n\t\t\t\t\t\t\t{onSourceClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ol>\n\t\t{:else}\n\t\t\t<ul dir=\"auto\">\n\t\t\t\t{#each token.items as item, itemIdx}\n\t\t\t\t\t<li class=\"text-start\">\n\t\t\t\t\t\t{#if item?.task}\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclass=\" translate-y-[1px] -translate-x-1\"\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={item.checked}\n\t\t\t\t\t\t\t\ton:change={(e) => {\n\t\t\t\t\t\t\t\t\tonTaskClick({\n\t\t\t\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t\t\t\t\ttoken: token,\n\t\t\t\t\t\t\t\t\t\ttokenIdx: tokenIdx,\n\t\t\t\t\t\t\t\t\t\titem: item,\n\t\t\t\t\t\t\t\t\t\titemIdx: itemIdx,\n\t\t\t\t\t\t\t\t\t\tchecked: e.target.checked\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t<svelte:self\n\t\t\t\t\t\t\tid={`${id}-${tokenIdx}-${itemIdx}`}\n\t\t\t\t\t\t\ttokens={item.tokens}\n\t\t\t\t\t\t\ttop={token.loose}\n\t\t\t\t\t\t\t{onTaskClick}\n\t\t\t\t\t\t\t{onSourceClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t{/if}\n\t{:else if token.type === 'details'}\n\t\t<Collapsible\n\t\t\ttitle={token.summary}\n\t\t\topen={$settings?.expandDetails ?? false}\n\t\t\tattributes={token?.attributes}\n\t\t\tclassName=\"w-full space-y-1\"\n\t\t\tdir=\"auto\"\n\t\t>\n\t\t\t<div class=\" mb-1.5\" slot=\"content\">\n\t\t\t\t<svelte:self\n\t\t\t\t\tid={`${id}-${tokenIdx}-d`}\n\t\t\t\t\ttokens={marked.lexer(token.text)}\n\t\t\t\t\tattributes={token?.attributes}\n\t\t\t\t\t{onTaskClick}\n\t\t\t\t\t{onSourceClick}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</Collapsible>\n\t{:else if token.type === 'html'}\n\t\t<HtmlToken {id} {token} {onSourceClick} />\n\t{:else if token.type === 'iframe'}\n\t\t<iframe\n\t\t\tsrc=\"{WEBUI_BASE_URL}/api/v1/files/{token.fileId}/content\"\n\t\t\ttitle={token.fileId}\n\t\t\twidth=\"100%\"\n\t\t\tframeborder=\"0\"\n\t\t\tonload=\"this.style.height=(this.contentWindow.document.body.scrollHeight+20)+'px';\"\n\t\t></iframe>\n\t{:else if token.type === 'paragraph'}\n\t\t<p dir=\"auto\">\n\t\t\t<MarkdownInlineTokens\n\t\t\t\tid={`${id}-${tokenIdx}-p`}\n\t\t\t\ttokens={token.tokens ?? []}\n\t\t\t\t{onSourceClick}\n\t\t\t/>\n\t\t</p>\n\t{:else if token.type === 'text'}\n\t\t{#if top}\n\t\t\t<p>\n\t\t\t\t{#if token.tokens}\n\t\t\t\t\t<MarkdownInlineTokens id={`${id}-${tokenIdx}-t`} tokens={token.tokens} {onSourceClick} />\n\t\t\t\t{:else}\n\t\t\t\t\t{unescapeHtml(token.text)}\n\t\t\t\t{/if}\n\t\t\t</p>\n\t\t{:else if token.tokens}\n\t\t\t<MarkdownInlineTokens\n\t\t\t\tid={`${id}-${tokenIdx}-p`}\n\t\t\t\ttokens={token.tokens ?? []}\n\t\t\t\t{onSourceClick}\n\t\t\t/>\n\t\t{:else}\n\t\t\t{unescapeHtml(token.text)}\n\t\t{/if}\n\t{:else if token.type === 'inlineKatex'}\n\t\t{#if token.text}\n\t\t\t<KatexRenderer content={token.text} displayMode={token?.displayMode ?? false} />\n\t\t{/if}\n\t{:else if token.type === 'blockKatex'}\n\t\t{#if token.text}\n\t\t\t<KatexRenderer content={token.text} displayMode={token?.displayMode ?? false} />\n\t\t{/if}\n\t{:else if token.type === 'space'}\n\t\t<div class=\"my-2\" />\n\t{:else}\n\t\t{console.log('Unknown token', token)}\n\t{/if}\n{/each}\n","<script>\n\timport { marked } from 'marked';\n\timport { replaceTokens, processResponseContent } from '$lib/utils';\n\timport { user } from '$lib/stores';\n\n\timport markedExtension from '$lib/utils/marked/extension';\n\timport markedKatexExtension from '$lib/utils/marked/katex-extension';\n\n\timport MarkdownTokens from './Markdown/MarkdownTokens.svelte';\n\n\texport let id = '';\n\texport let content;\n\texport let model = null;\n\texport let save = false;\n\texport let preview = false;\n\n\texport let sourceIds = [];\n\n\texport let onSave = () => {};\n\texport let onUpdate = () => {};\n\n\texport let onPreview = () => {};\n\n\texport let onSourceClick = () => {};\n\texport let onTaskClick = () => {};\n\n\tlet tokens = [];\n\n\tconst options = {\n\t\tthrowOnError: false\n\t};\n\n\tmarked.use(markedKatexExtension(options));\n\tmarked.use(markedExtension(options));\n\n\t$: (async () => {\n\t\tif (content) {\n\t\t\ttokens = marked.lexer(\n\t\t\t\treplaceTokens(processResponseContent(content), sourceIds, model?.name, $user?.name)\n\t\t\t);\n\t\t}\n\t})();\n</script>\n\n{#key id}\n\t<MarkdownTokens\n\t\t{tokens}\n\t\t{id}\n\t\t{save}\n\t\t{preview}\n\t\t{onTaskClick}\n\t\t{onSourceClick}\n\t\t{onSave}\n\t\t{onUpdate}\n\t\t{onPreview}\n\t/>\n{/key}\n","<script lang=\"ts\">\n\timport { decode } from 'html-entities';\n\timport { v4 as uuidv4 } from 'uuid';\n\n\timport { getContext } from 'svelte';\n\tconst i18n = getContext('i18n');\n\n\timport dayjs from '$lib/dayjs';\n\timport duration from 'dayjs/plugin/duration';\n\timport relativeTime from 'dayjs/plugin/relativeTime';\n\n\tdayjs.extend(duration);\n\tdayjs.extend(relativeTime);\n\n\tasync function loadLocale(locales) {\n\t\tif (!locales || !Array.isArray(locales)) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const locale of locales) {\n\t\t\ttry {\n\t\t\t\tdayjs.locale(locale);\n\t\t\t\tbreak; // Stop after successfully loading the first available locale\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Could not load locale '${locale}':`, error);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Assuming $i18n.languages is an array of language codes\n\t$: loadLocale($i18n.languages);\n\n\timport { slide } from 'svelte/transition';\n\timport { quintOut } from 'svelte/easing';\n\n\timport ChevronUp from '../icons/ChevronUp.svelte';\n\timport ChevronDown from '../icons/ChevronDown.svelte';\n\timport Spinner from './Spinner.svelte';\n\timport CodeBlock from '../chat/Messages/CodeBlock.svelte';\n\timport Markdown from '../chat/Messages/Markdown.svelte';\n\timport Image from './Image.svelte';\n\n\texport let open = false;\n\n\texport let className = '';\n\texport let buttonClassName =\n\t\t'w-fit text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 transition';\n\n\texport let id = '';\n\texport let title = null;\n\texport let attributes = null;\n\n\texport let chevron = false;\n\texport let grow = false;\n\n\texport let disabled = false;\n\texport let hide = false;\n\n\texport let onChange: Function = () => {};\n\n\t$: onChange(open);\n\n\tconst collapsibleId = uuidv4();\n\n\tfunction parseJSONString(str) {\n\t\ttry {\n\t\t\treturn parseJSONString(JSON.parse(str));\n\t\t} catch (e) {\n\t\t\treturn str;\n\t\t}\n\t}\n\n\tfunction formatJSONString(str) {\n\t\ttry {\n\t\t\tconst parsed = parseJSONString(str);\n\t\t\t// If parsed is an object/array, then it's valid JSON\n\t\t\tif (typeof parsed === 'object') {\n\t\t\t\treturn JSON.stringify(parsed, null, 2);\n\t\t\t} else {\n\t\t\t\t// It's a primitive value like a number, boolean, etc.\n\t\t\t\treturn `${JSON.stringify(String(parsed))}`;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// Not valid JSON, return as-is\n\t\t\treturn str;\n\t\t}\n\t}\n</script>\n\n<div {id} class={className}>\n\t{#if title !== null}\n\t\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t<div\n\t\t\tclass=\"{buttonClassName} cursor-pointer\"\n\t\t\ton:pointerup={() => {\n\t\t\t\tif (!disabled) {\n\t\t\t\t\topen = !open;\n\t\t\t\t}\n\t\t\t}}\n\t\t>\n\t\t\t<div\n\t\t\t\tclass=\" w-full font-medium flex items-center justify-between gap-2 {attributes?.done &&\n\t\t\t\tattributes?.done !== 'true'\n\t\t\t\t\t? 'shimmer'\n\t\t\t\t\t: ''}\n\t\t\t\"\n\t\t\t>\n\t\t\t\t{#if attributes?.done && attributes?.done !== 'true'}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Spinner className=\"size-4\" />\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\n\t\t\t\t<div class=\"\">\n\t\t\t\t\t{#if attributes?.type === 'reasoning'}\n\t\t\t\t\t\t{#if attributes?.done === 'true' && attributes?.duration}\n\t\t\t\t\t\t\t{#if attributes.duration < 60}\n\t\t\t\t\t\t\t\t{$i18n.t('Thought for {{DURATION}} seconds', {\n\t\t\t\t\t\t\t\t\tDURATION: attributes.duration\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t\t{$i18n.t('Thought for {{DURATION}}', {\n\t\t\t\t\t\t\t\t\tDURATION: dayjs.duration(attributes.duration, 'seconds').humanize()\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t{$i18n.t('Thinking...')}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{:else if attributes?.type === 'code_interpreter'}\n\t\t\t\t\t\t{#if attributes?.done === 'true'}\n\t\t\t\t\t\t\t{$i18n.t('Analyzed')}\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t{$i18n.t('Analyzing...')}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{:else if attributes?.type === 'tool_calls'}\n\t\t\t\t\t\t{#if attributes?.done === 'true'}\n\t\t\t\t\t\t\t<Markdown\n\t\t\t\t\t\t\t\tid={`${collapsibleId}-tool-calls-${attributes?.id}`}\n\t\t\t\t\t\t\t\tcontent={$i18n.t('View Result from **{{NAME}}**', {\n\t\t\t\t\t\t\t\t\tNAME: attributes.name\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<Markdown\n\t\t\t\t\t\t\t\tid={`${collapsibleId}-tool-calls-${attributes?.id}-executing`}\n\t\t\t\t\t\t\t\tcontent={$i18n.t('Executing **{{NAME}}**...', {\n\t\t\t\t\t\t\t\t\tNAME: attributes.name\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t{title}\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"flex self-center translate-y-[1px]\">\n\t\t\t\t\t{#if open}\n\t\t\t\t\t\t<ChevronUp strokeWidth=\"3.5\" className=\"size-3.5\" />\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t<ChevronDown strokeWidth=\"3.5\" className=\"size-3.5\" />\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t{:else}\n\t\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t<div\n\t\t\tclass=\"{buttonClassName} cursor-pointer\"\n\t\t\ton:pointerup={() => {\n\t\t\t\tif (!disabled) {\n\t\t\t\t\topen = !open;\n\t\t\t\t}\n\t\t\t}}\n\t\t>\n\t\t\t<div>\n\t\t\t\t<div class=\"flex items-start justify-between\">\n\t\t\t\t\t<slot />\n\n\t\t\t\t\t{#if chevron}\n\t\t\t\t\t\t<div class=\"flex self-start translate-y-1\">\n\t\t\t\t\t\t\t{#if open}\n\t\t\t\t\t\t\t\t<ChevronUp strokeWidth=\"3.5\" className=\"size-3.5\" />\n\t\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t\t<ChevronDown strokeWidth=\"3.5\" className=\"size-3.5\" />\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\n\t\t\t\t{#if grow}\n\t\t\t\t\t{#if open && !hide}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\ttransition:slide={{ duration: 300, easing: quintOut, axis: 'y' }}\n\t\t\t\t\t\t\ton:pointerup={(e) => {\n\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<slot name=\"content\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t{#if attributes?.type === 'tool_calls'}\n\t\t{@const args = decode(attributes?.arguments)}\n\t\t{@const result = decode(attributes?.result ?? '')}\n\t\t{@const files = parseJSONString(decode(attributes?.files ?? ''))}\n\n\t\t{#if !grow}\n\t\t\t{#if open && !hide}\n\t\t\t\t<div transition:slide={{ duration: 300, easing: quintOut, axis: 'y' }}>\n\t\t\t\t\t{#if attributes?.type === 'tool_calls'}\n\t\t\t\t\t\t{#if attributes?.done === 'true'}\n\t\t\t\t\t\t\t<Markdown\n\t\t\t\t\t\t\t\tid={`${collapsibleId}-tool-calls-${attributes?.id}-result`}\n\t\t\t\t\t\t\t\tcontent={`> \\`\\`\\`json\n> ${formatJSONString(args)}\n> ${formatJSONString(result)}\n> \\`\\`\\``}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<Markdown\n\t\t\t\t\t\t\t\tid={`${collapsibleId}-tool-calls-${attributes?.id}-result`}\n\t\t\t\t\t\t\t\tcontent={`> \\`\\`\\`json\n> ${formatJSONString(args)}\n> \\`\\`\\``}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t<slot name=\"content\" />\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t{/if}\n\n\t\t\t{#if attributes?.done === 'true'}\n\t\t\t\t{#if typeof files === 'object'}\n\t\t\t\t\t{#each files ?? [] as file, idx}\n\t\t\t\t\t\t{#if file.startsWith('data:image/')}\n\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\tid={`${collapsibleId}-tool-calls-${attributes?.id}-result-${idx}`}\n\t\t\t\t\t\t\t\tsrc={file}\n\t\t\t\t\t\t\t\talt=\"Image\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{/each}\n\t\t\t\t{/if}\n\t\t\t{/if}\n\t\t{/if}\n\t{:else if !grow}\n\t\t{#if open && !hide}\n\t\t\t<div transition:slide={{ duration: 300, easing: quintOut, axis: 'y' }}>\n\t\t\t\t<slot name=\"content\" />\n\t\t\t</div>\n\t\t{/if}\n\t{/if}\n</div>\n"],"names":["uuidv4","unescapeHtml"],"mappings":"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"}