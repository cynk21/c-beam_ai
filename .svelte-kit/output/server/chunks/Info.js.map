{"version":3,"file":"Info.js","sources":["../../../../src/lib/components/common/ImagePreview.svelte","../../../../src/lib/components/common/Image.svelte","../../../../src/lib/components/icons/Info.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { onDestroy, onMount } from 'svelte';\n\timport panzoom, { type PanZoom } from 'panzoom';\n\n\timport fileSaver from 'file-saver';\n\tconst { saveAs } = fileSaver;\n\n\texport let show = false;\n\texport let src = '';\n\texport let alt = '';\n\n\tlet mounted = false;\n\n\tlet previewElement = null;\n\n\tlet instance: PanZoom;\n\n\tlet sceneParentElement: HTMLElement;\n\tlet sceneElement: HTMLElement;\n\n\t$: if (sceneElement) {\n\t\tinstance = panzoom(sceneElement, {\n\t\t\tbounds: true,\n\t\t\tboundsPadding: 0.1,\n\n\t\t\tzoomSpeed: 0.065\n\t\t});\n\t}\n\tconst resetPanZoomViewport = () => {\n\t\tinstance.moveTo(0, 0);\n\t\tinstance.zoomAbs(0, 0, 1);\n\t\tconsole.log(instance.getTransform());\n\t};\n\n\tconst handleKeyDown = (event: KeyboardEvent) => {\n\t\tif (event.key === 'Escape') {\n\t\t\tconsole.log('Escape');\n\t\t\tshow = false;\n\t\t}\n\t};\n\n\tonMount(() => {\n\t\tmounted = true;\n\t});\n\n\t$: if (show && previewElement) {\n\t\tdocument.body.appendChild(previewElement);\n\t\twindow.addEventListener('keydown', handleKeyDown);\n\t\tdocument.body.style.overflow = 'hidden';\n\t} else if (previewElement) {\n\t\twindow.removeEventListener('keydown', handleKeyDown);\n\t\tdocument.body.removeChild(previewElement);\n\t\tdocument.body.style.overflow = 'unset';\n\t}\n\n\tonDestroy(() => {\n\t\tshow = false;\n\n\t\tif (previewElement) {\n\t\t\tdocument.body.removeChild(previewElement);\n\t\t}\n\t});\n</script>\n\n{#if show}\n\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t<div\n\t\tbind:this={previewElement}\n\t\tclass=\"modal fixed top-0 right-0 left-0 bottom-0 bg-black text-white w-full min-h-screen h-screen flex justify-center z-9999 overflow-hidden overscroll-contain\"\n\t>\n\t\t<div class=\" absolute left-0 w-full flex justify-between select-none z-20\">\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tclass=\" p-5\"\n\t\t\t\t\ton:pointerdown={(e) => {\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tshow = false;\n\t\t\t\t\t}}\n\t\t\t\t\ton:click={(e) => {\n\t\t\t\t\t\tshow = false;\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\tclass=\"w-6 h-6\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tclass=\" p-5 z-999\"\n\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\tif (src.startsWith('data:image/')) {\n\t\t\t\t\t\t\tconst base64Data = src.split(',')[1];\n\t\t\t\t\t\t\tconst blob = new Blob([Uint8Array.from(atob(base64Data), (c) => c.charCodeAt(0))], {\n\t\t\t\t\t\t\t\ttype: 'image/png'\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconst mimeType = blob.type || 'image/png';\n\t\t\t\t\t\t\t// create file name based on the MIME type, alt should be a valid file name with extension\n\t\t\t\t\t\t\tconst fileName = alt\n\t\t\t\t\t\t\t\t? `${alt.replaceAll('.', '')}.${mimeType.split('/')[1]}`\n\t\t\t\t\t\t\t\t: 'download.png';\n\n\t\t\t\t\t\t\t// Use FileSaver to save the blob\n\t\t\t\t\t\t\tsaveAs(blob, fileName);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else if (src.startsWith('blob:')) {\n\t\t\t\t\t\t\t// Handle blob URLs\n\t\t\t\t\t\t\tfetch(src)\n\t\t\t\t\t\t\t\t.then((response) => response.blob())\n\t\t\t\t\t\t\t\t.then((blob) => {\n\t\t\t\t\t\t\t\t\t// detect the MIME type from the blob\n\t\t\t\t\t\t\t\t\tconst mimeType = blob.type || 'image/png';\n\n\t\t\t\t\t\t\t\t\t// Create a new Blob with the correct MIME type\n\t\t\t\t\t\t\t\t\tconst blobWithType = new Blob([blob], { type: mimeType });\n\n\t\t\t\t\t\t\t\t\t// create file name based on the MIME type, alt should be a valid file name with extension\n\t\t\t\t\t\t\t\t\tconst fileName = alt\n\t\t\t\t\t\t\t\t\t\t? `${alt.replaceAll('.', '')}.${mimeType.split('/')[1]}`\n\t\t\t\t\t\t\t\t\t\t: 'download.png';\n\n\t\t\t\t\t\t\t\t\t// Use FileSaver to save the blob\n\t\t\t\t\t\t\t\t\tsaveAs(blobWithType, fileName);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\t\t\tconsole.error('Error downloading blob:', error);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tsrc.startsWith('/') ||\n\t\t\t\t\t\t\tsrc.startsWith('http://') ||\n\t\t\t\t\t\t\tsrc.startsWith('https://')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// Handle remote URLs\n\t\t\t\t\t\t\tfetch(src)\n\t\t\t\t\t\t\t\t.then((response) => response.blob())\n\t\t\t\t\t\t\t\t.then((blob) => {\n\t\t\t\t\t\t\t\t\t// detect the MIME type from the blob\n\t\t\t\t\t\t\t\t\tconst mimeType = blob.type || 'image/png';\n\n\t\t\t\t\t\t\t\t\t// Create a new Blob with the correct MIME type\n\t\t\t\t\t\t\t\t\tconst blobWithType = new Blob([blob], { type: mimeType });\n\n\t\t\t\t\t\t\t\t\t// create file name based on the MIME type, alt should be a valid file name with extension\n\t\t\t\t\t\t\t\t\tconst fileName = alt\n\t\t\t\t\t\t\t\t\t\t? `${alt.replaceAll('.', '')}.${mimeType.split('/')[1]}`\n\t\t\t\t\t\t\t\t\t\t: 'download.png';\n\n\t\t\t\t\t\t\t\t\t// Use FileSaver to save the blob\n\t\t\t\t\t\t\t\t\tsaveAs(blobWithType, fileName);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\t\t\tconsole.error('Error downloading remote image:', error);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\tclass=\"w-6 h-6\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td=\"M10.75 2.75a.75.75 0 0 0-1.5 0v8.614L6.295 8.235a.75.75 0 1 0-1.09 1.03l4.25 4.5a.75.75 0 0 0 1.09 0l4.25-4.5a.75.75 0 0 0-1.09-1.03l-2.955 3.129V2.75Z\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td=\"M3.5 12.75a.75.75 0 0 0-1.5 0v2.5A2.75 2.75 0 0 0 4.75 18h10.5A2.75 2.75 0 0 0 18 15.25v-2.5a.75.75 0 0 0-1.5 0v2.5c0 .69-.56 1.25-1.25 1.25H4.75c-.69 0-1.25-.56-1.25-1.25v-2.5Z\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"flex h-full max-h-full justify-center items-center z-0\">\n\t\t\t<img\n\t\t\t\tbind:this={sceneElement}\n\t\t\t\t{src}\n\t\t\t\t{alt}\n\t\t\t\tclass=\" mx-auto h-full object-scale-down select-none\"\n\t\t\t\tdraggable=\"false\"\n\t\t\t/>\n\t\t</div>\n\t</div>\n{/if}\n","<script lang=\"ts\">\n\timport { WEBUI_BASE_URL } from '$lib/constants';\n\timport ImagePreview from './ImagePreview.svelte';\n\n\texport let src = '';\n\texport let alt = '';\n\n\texport let className = ' w-full outline-hidden focus:outline-hidden';\n\texport let imageClassName = 'rounded-lg';\n\n\texport let dismissible = false;\n\texport let onDismiss = () => {};\n\n\tlet _src = '';\n\t$: _src = src.startsWith('/') ? `${WEBUI_BASE_URL}${src}` : src;\n\n\tlet showImagePreview = false;\n</script>\n\n<ImagePreview bind:show={showImagePreview} src={_src} {alt} />\n\n<div class=\" relative group w-fit\">\n\t<button\n\t\tclass={className}\n\t\ton:click={() => {\n\t\t\tshowImagePreview = true;\n\t\t}}\n\t\ttype=\"button\"\n\t>\n\t\t<img src={_src} {alt} class={imageClassName} draggable=\"false\" data-cy=\"image\" />\n\t</button>\n\n\t{#if dismissible}\n\t\t<div class=\" absolute -top-1 -right-1\">\n\t\t\t<button\n\t\t\t\tclass=\" bg-white text-black border border-white rounded-full group-hover:visible invisible transition\"\n\t\t\t\ttype=\"button\"\n\t\t\t\ton:click={() => {\n\t\t\t\t\tonDismiss();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\tclass=\"size-4\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t</div>\n\t{/if}\n</div>\n","<script lang=\"ts\">\n\texport let className = 'size-4';\n\texport let strokeWidth = '1.5';\n</script>\n\n<svg\n\txmlns=\"http://www.w3.org/2000/svg\"\n\tfill=\"none\"\n\tviewBox=\"0 0 24 24\"\n\tstroke-width={strokeWidth}\n\tstroke=\"currentColor\"\n\tclass={className}\n>\n\t<path\n\t\tstroke-linecap=\"round\"\n\t\tstroke-linejoin=\"round\"\n\t\td=\"m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z\"\n\t/>\n</svg>\n"],"names":[],"mappings":";;;;;QAOY,OAAO,MAAA,IAAA;QACP,MAAM,GAAA,IAAA;QACN,MAAM,GAAA,IAAA;MAIb,iBAAiB;AAKjB,MAAA;QAgBE,gBAAiB,WAAA;AAClB,QAAA,MAAM,QAAQ,UAAA;AACjB,cAAQ,IAAI,QAAQ;AACpB,aAAO;AAAA;;AAkBT,YAAA,MAAA;AACC,WAAO;AAAA;;;;;QAXD,QAAQ,gBAAA;AACd,eAAS,KAAK,YAAY,cAAc;AACxC,aAAO,iBAAiB,WAAW,aAAa;AAChD,eAAS,KAAK,MAAM,WAAW;AAAA;;YAgB5B,OAIQ,0KAAA,cAAA,QAAA,0oCAuHE,cAAY,CAAA,CAAA;;;QCvLf,MAAM,GAAA,IAAA;QACN,MAAM,GAAA,IAAA;QAEN,YAAY,8CAAA,IAAA;QACZ,iBAAiB,aAAA,IAAA;QAEjB,cAAc,MAAA,IAAA;AACd,MAAA,EAAA,YAAA,MAAA;AAAA;MAEP,OAAO;MAGP,mBAAmB;;;;;;;;;;;;;AAFpB,WAAO,IAAI,WAAW,GAAG,OAAO,cAAc,GAAG,GAAG,KAAK;;;MAKb,EAAA,KAAA,iBAAvB,iBAAgB;AAAA;;AAAhB,6BAAgB;;;;;IAIhC,CAAA,6CAAA,cAAA,SAAA,WAMG,CAAA,CAAA,sBAAA,cAAA,OAAA,MAAmB,CAAA,CAAA,GAAA,cAAA,OAAA,KAAA,CAAA,CAAA,GAAA,cAAA,SAAA,kEAGzB;;;;;QC/BM,YAAY,SAAA,IAAA;QACZ,cAAc,MAAA,IAAA;;;AAOX,SAAA,0EAAA,cAAA,gBAAA,+DAEP,WAAS,CAAA,CAAA;;"}